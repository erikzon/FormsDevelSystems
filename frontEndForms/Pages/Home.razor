@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using System.Text.Json.Serialization;

<RadzenCard>
    <RadzenText TextStyle="TextStyle.Caption">por simplificacion el usuario para autenticacion por JWT es:</RadzenText>
    <br />
    <RadzenText TextStyle="TextStyle.Caption">usuario: user </RadzenText>
    <br />
    <RadzenText TextStyle="TextStyle.Caption">contraseña: password</RadzenText>
</RadzenCard>
<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="false" AllowResetPassword="false" Username=@modelo.Username Password=@modelo.Password Login=@(args => Login(args)) />
    </RadzenTemplateForm>
</RadzenCard>

@code {
    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    LoginModel modelo = new LoginModel();

    private async Task Login(Radzen.LoginArgs args)
    {
        var request = new HttpRequestMessage(HttpMethod.Post, $"http://localhost:5029/api/Auth/login?username={args.Username}&password={args.Password}");
        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadFromJsonAsync<TokenResponse>();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "access_token", token.AccessToken);
            Navigation.NavigateTo("/Encuestas");
        }
    }

    public class TokenResponse
    {
        [JsonPropertyName("access_token")]
        public string AccessToken { get; set; }
    }
}
