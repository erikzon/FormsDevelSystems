@page "/encuestas"
@using frontEndForms.Modelos
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject DialogService DialogService

<PageTitle>Encuestas</PageTitle>
<CerrarSesion />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@listaEncuentas" TItem="Encuesta" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <HeaderTemplate>
        <RadzenButton Text="Crear nueva encuestra" Click=@CrearNuevaEncuesta />
    </HeaderTemplate>
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay encuestas por mostrar.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Encuesta" Property="Nombre" Filterable="false" Title="Titulo" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Encuesta" Property="Descripcion" Title="Descripcion" Frozen="true" Width="70px" />
        <RadzenDataGridColumn TItem="Encuesta" Property="Link" Title="Link" Frozen="true" Width="300px">
            <Template Context="data">
                <a href="@data.Link" target="_blank">@data.Link</a>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Encuesta" Property="Link" Title="Visualizar" Frozen="true" Width="40px" Filterable=false>
            <Template Context="data">
                <RadzenButton Click="@(async () => await VisualizarResultados(data))" Size="ButtonSize.Small" Text="🔎" ButtonStyle="ButtonStyle.Success" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Encuesta" Property="Link" Title="Eliminar" Frozen="true" Width="40px" Filterable=false>
            <Template Context="data">
                <RadzenButton Text="❌" ButtonStyle="ButtonStyle.Warning"
                              Click=@(async args => {
                              var result = await DialogService.Confirm(
                              "Esta seguro?",
                              "Eliminar cuestionario",
                              new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" }
                              );
                              if (result == true)
                              {
                              await Eliminar(data);
                              }}) />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    public Encuesta[]? listaEncuentas;
    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "access_token");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        try
        {
            listaEncuentas = await Http.GetFromJsonAsync<Encuesta[]>("http://localhost:5029/api/Encuestas");
        }
        catch (Exception)
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    async Task CrearNuevaEncuesta()
    {
        await DialogService.OpenAsync<CrearEncuesta>($"Crear encuesta",
               null,
               new DialogOptions() { Width = "800px", Height = "512px", Resizable = true, Draggable = true });

        // await refrescarData();
    }

    async Task VisualizarResultados(Encuesta args)
    {
        await DialogService.OpenAsync<CrearEncuesta>($"Crear encuesta",
               null,
               new DialogOptions() { Width = "800px", Height = "512px", Resizable = true, Draggable = true });

        // await refrescarData();
    }

    async Task Eliminar(Encuesta args)
    {
        await Http.DeleteAsync($"http://localhost:5029/api/Encuestas/{args.IdEncuesta}");

        // await refrescarData();
    }

    void selectedEmployees()
    {

    }

    async Task refrescarData()
    {
        listaEncuentas = await Http.GetFromJsonAsync<Encuesta[]>("http://localhost:5029/api/Encuestas");
    }
}
